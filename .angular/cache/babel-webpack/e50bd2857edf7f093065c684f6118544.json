{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nexport class CrudService {\n  constructor(http, base) {\n    this.http = http;\n    this.base = base;\n  }\n\n  newDefault() {\n    return this.http.get(this.base + 'NewDefault/').pipe(catchError(this.handleError));\n  }\n\n  add(t) {\n    return this.http.post(this.base, t).pipe(catchError(this.handleError));\n  }\n\n  update(id, t) {\n    return this.http.put(this.base + id, t, {}).pipe(catchError(this.handleError));\n  }\n\n  findOne(id) {\n    return this.http.get(this.base + id);\n  }\n\n  findByName(name) {\n    return this.http.get(this.base + 'byName/' + name);\n  }\n\n  findAll() {\n    return this.http.get(this.base);\n  }\n\n  delete(id) {\n    return this.http.delete(this.base + id).pipe(catchError(this.handleError));\n  }\n\n  handleError(error) {\n    let errorMessage = 'Unknown error!';\n\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      errorMessage = `Error Code: ${error.message}\\nMessage: ${error.message}\\Descripcion: ${error.error}`;\n    }\n\n    return throwError(error);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}